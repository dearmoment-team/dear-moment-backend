name: Deploy to Production

on:
  workflow_run:
    workflows: ["Docker Publish"]      # Docker Publish가 성공하면 실행
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH using Docker Compose
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.SERVER_IP }}         # 원격 서버 IP (예: OCI VM)
          username: ${{ secrets.SERVER_USER }}     # 원격 서버 접속 사용자 (예: ubuntu)
          key: ${{ secrets.SSH_PRIVATE_KEY }}      # SSH 개인키 (GitHub Secrets)
          script: |
            echo "==== Creating/updating .env in ~/env/.env ===="
            cat <<EOF > ~/env/.env
            # -----------------------
            # [1] Spring Profiles
            SPRING_PROFILES_ACTIVE=prod
            SPRING_APPLICATION_NAME=dearmoment-backend
            
            # -----------------------
            # [2] DB Config
            SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
            SPRING_DATASOURCE_DRIVER_CLASS_NAME=oracle.jdbc.OracleDriver
            
            SPRING_JPA_HIBERNATE_DDL_AUTO=none
            SPRING_JPA_SHOW_SQL=false
            SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.OracleDialect
            
            ORACLE_PASSWORD=oracle_password
            APP_USER=spring_user
            APP_USER_PASSWORD=spring_password
            
            # -----------------------
            # [3] Object Storage
            OBJECT_STORAGE_CONFIG_PATH=${{ secrets.OBJECT_STORAGE_CONFIG_PATH }}
            OBJECT_STORAGE_BUCKET_NAME=${{ secrets.OBJECT_STORAGE_BUCKET_NAME }}
            OBJECT_STORAGE_NAMESPACE_NAME=${{ secrets.OBJECT_STORAGE_NAMESPACE_NAME }}
            OBJECT_STORAGE_IMAGE_DIR=${{ secrets.OBJECT_STORAGE_IMAGE_DIR }}
            
            # -----------------------
            # [4] Sentry
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            
            # -----------------------
            # [5] Mail
            MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            MAIL_RECEIVER=${{ secrets.MAIL_RECEIVER }}
            
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
            
            # Kakao OAuth
            OAUTH_KAKAO_CLIENT_ID=${{ secrets.OAUTH_KAKAO_CLIENT_ID }}
            OAUTH_KAKAO_APP_ADMIN_KEY: ${{ secrets.OAUTH_KAKAO_APP_ADMIN_KEY }}
            OAUTH_KAKAO_REDIRECT_URI=${{ secrets.OAUTH_KAKAO_REDIRECT_URI }}
            OAUTH_KAKAO_REDIRECT_SUCCESS: ${{ secrets.OAUTH_KAKAO_REDIRECT_SUCCESS }}
            OAUTH_KAKAO_REDIRECT_FAILURE: ${{ secrets.OAUTH_KAKAO_REDIRECT_FAILURE }}
            
            EOF
            echo "==== .env file updated in ~/env/.env ===="
            cd ~
            echo "==== Logging into GHCR... ===="
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
            echo "==== Pulling the latest image from GHCR... ===="
            docker pull ghcr.io/${{ github.repository }}/dear-moment-backend:latest
            echo "==== Shutting down existing containers ===="
            docker compose down
            echo "==== Starting containers (using the new image + updated .env) ===="
            docker compose up --pull always -d --force-recreate
            docker images prune
