package kr.kro.dearmoment.user.domain

import io.kotest.core.spec.style.DescribeSpec
import io.kotest.assertions.throwables.shouldThrow
import java.time.LocalDateTime

class UserTest : DescribeSpec({

    describe("User 엔티티 생성") {

        context("모든 필드가 정상적이면") {
            it("정상적으로 객체가 생성된다.") {
                val now = LocalDateTime.now()
                val user = User(
                    id = null,                  // DB에서 자동 할당
                    loginId = "testUser",       // 정상 로그인 아이디
                    password = "pass1234",      // 정상 비밀번호
                    name = "홍길동",             // 정상 이름
                    isStudio = false,           // 스튜디오 유저 여부
                    createdAt = now,            // 생성 시각
                    updatedAt = now,            // 수정 시각
                    createdUser = "admin",      // 생성 유저
                    updatedUser = "admin"       // 수전 유저
                )
            }
        }

        context("loginId가 비어있으면") {
            it("예외를 발생시킨다.") {
                shouldThrow<IllegalArgumentException> {
                    User(
                        id = null,
                        loginId = "", // 비어있음
                        password = "pass1234",
                        name = "홍길동",
                        isStudio = false,
                        createdAt = LocalDateTime.now(),
                        updatedAt = LocalDateTime.now(),
                        createdUser = "admin",
                        updatedUser = "admin"
                    )
                }
            }
        }

        context("password가 비어있으면") {
            it("예외를 발생시킨다.") {
                shouldThrow<IllegalArgumentException> {
                    User(
                        id = null,
                        loginId = "testUser",
                        password = "", // 비어있음
                        name = "홍길동",
                        isStudio = false,
                        createdAt = LocalDateTime.now(),
                        updatedAt = LocalDateTime.now(),
                        createdUser = "admin",
                        updatedUser = "admin"
                    )
                }
            }
        }

        context("name이 비어있으면") {
            it("예외를 발생시킨다.") {
                shouldThrow<IllegalArgumentException> {
                    User(
                        id = null,
                        loginId = "testUser",
                        password = "pass1234",
                        name = "", // 비어있음
                        isStudio = false,
                        createdAt = LocalDateTime.now(),
                        updatedAt = LocalDateTime.now(),
                        createdUser = "admin",
                        updatedUser = "admin"
                    )
                }
            }
        }

        context("createdUser가 비어있으면") {
            it("예외를 발생시킨다.") {
                shouldThrow<IllegalArgumentException> {
                    User(
                        id = null,
                        loginId = "testUser",
                        password = "pass1234",
                        name = "홍길동",
                        isStudio = false,
                        createdAt = LocalDateTime.now(),
                        updatedAt = LocalDateTime.now(),
                        createdUser = "", // 비어있음
                        updatedUser = "admin"
                    )
                }
            }
        }

        context("updatedUser가 비어있으면") {
            it("예외를 발생시킨다.") {
                shouldThrow<IllegalArgumentException> {
                    User(
                        id = null,
                        loginId = "testUser",
                        password = "pass1234",
                        name = "홍길동",
                        isStudio = false,
                        createdAt = LocalDateTime.now(),
                        updatedAt = LocalDateTime.now(),
                        createdUser = "admin",
                        updatedUser = "" // 비어있음
                    )
                }
            }
        }

        context("createdAt이 updatedAt보다 뒤라면") {
            it("예외를 발생시킨다.") {
                val now = LocalDateTime.now()
                val future = now.plusHours(1)

                shouldThrow<IllegalArgumentException> {
                    User(
                        id = null,
                        loginId = "testUser",
                        password = "pass1234",
                        name = "홍길동",
                        isStudio = false,
                        createdAt = future, // future가 now보다 뒤
                        updatedAt = now,    // now가 더 앞
                        createdUser = "admin",
                        updatedUser = "admin"
                    )
                }
            }
        }
    }
})
